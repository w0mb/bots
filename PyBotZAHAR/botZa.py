import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from config import TOKEN
from datetime import datetime, timedelta

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=TOKEN)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.include_router(router)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–∏–Ω–ª–∞–π–Ω)
# action1_button = InlineKeyboardButton(text="–ê—Ä—Ö–∏–≤ —Å—Å—É—á–µ–∫ (–º–µ—Å—è—Ü)", callback_data="action1")
action2_button = InlineKeyboardButton(text="–ü—Ä–∏–≤–∞—Ç–∫–∞ (–ù–ê–í–°–ï–ì–î–ê)üí•", callback_data="action2")
action_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[action2_button]]  # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
)

accepting_requests = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command(commands=['start']))
async def start_handler(message: Message):
    await message.answer("üíú –ü—Ä–∏–≤–∞—Ç–∫–∞ Premium ‚ù§Ô∏è\n\t\tüëª–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Åüëª")
    image_path = "image.jpg"  # –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo = FSInputFile(image_path)
    caption = (
        "‚ÜòÔ∏è ‚ùóÔ∏è–ù–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞‚ùóÔ∏è ‚ÜôÔ∏è\n\n"
        "‚Ä¢ —Ç–æ–ª—å–∫–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç üî•\n"
        "‚Ä¢ –ø–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å üîí\n"
        "‚Ä¢ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–∫–∏ ‚ôªÔ∏è\n\n"
        "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã–π –±–æ—Ç –Ω–∞ —Å–ª—É—á–∞–π –±–∞–Ω–∞ –ø—Ä–∏–≤–∞—Ç–∫–∏\n\n"
        "–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ –≤ —Å—Ç–∞—Ç—å–µüëá\n"
        
    )
    await message.answer_photo(photo, caption=caption)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–î–µ–π—Å—Ç–≤–∏—è 1"
@router.callback_query(lambda query: query.data == "action1")
async def action1_handler(query: types.CallbackQuery):
    await query.answer()
    new_text = (
        "–¢–∞—Ä–∏—Ñ: –ü—Ä–∏–≤–∞—Ç–∫–∞ (–Ω–∞–≤—Å–µ–≥–¥–∞)\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 600.00 RUB\n"
        "–î–æ—Å—Ç—É–ø –∫:\n"
        "‚Ä¢ üòà –ü—Ä–∏–≤–∞—Ç–∫–∞ Premium üëë\n\n"
        "–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø:\n"
        "–ö –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Å–æ —Å–∫—Ä—ã—Ç—ã—Ö –∫–∞–º–µ—Ä üí¶\n"
        "–í–∏–¥–µ–æ —Å –ª–∏—Ü–æ–º –±–µ–∑ –±–ª—é—Ä–∞ üçì\n"
        "–°–∞–º—ã–π —Å–æ—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª,–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∏–≥–¥–µ –Ω–µ—ÇüíØ\n\n"
    )
    await query.message.edit_text(new_text, reply_markup=None)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å" –∏ "üëà–Ω–∞–∑–∞–¥"
    pay_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_action1")
    back_button = InlineKeyboardButton(text="üëà–Ω–∞–∑–∞–¥", callback_data="back_to_actions")
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[pay_button], [back_button]]
    )
    await query.message.edit_reply_markup(reply_markup=back_keyboard)

async def auto_accept_requests():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º chat_id.
    :param chat_id: ID –≥—Ä—É–ø–ø—ã, –≥–¥–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.
    """
    global accepting_requests
    chat_id = -1002028462189
    while accepting_requests:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
            pending_requests = await bot.get_chat_join_requests(chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–æ–∫
            if not pending_requests:
                print("–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
            else:
                for request in pending_requests:
                    user_id = request.from_user.id
                    await bot.approve_chat_join_request(chat_id, user_id)
                    print(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞.")
                    
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–ø—Ä–æ—Å–æ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            await asyncio.sleep(1)

        except TelegramAPIError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–æ–∫: {e}")
            await asyncio.sleep(30)  # –û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫
            

            
async def monitor_terminal():
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.
    –ü—Ä–∏ –≤–≤–æ–¥–µ 'stop_accepting' –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫.
    """
    global accepting_requests
    while True:
        user_input = await asyncio.get_event_loop().run_in_executor(None, input, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")
        if user_input.strip().lower() == "stop_accepting":
            accepting_requests = False
            print("–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            break

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–æ–ø–ª–∞—Ç–∏—Ç—å" –≤ "–î–µ–π—Å—Ç–≤–∏–µ 1"
@router.callback_query(lambda query: query.data == "pay_action1")
async def pay_action1_handler(query: types.CallbackQuery):
    await query.answer()
    payment_text = "‚úÖ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø—ã –∫ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ. –ü–ª–∞—Ç–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏ —Ç—É —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞"
    await query.message.edit_text(payment_text)

    pay_button = InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="go_to_payment")
    cancel_button = InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="back_to_actions")
    payment_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[pay_button], [cancel_button]]
    )
    await query.message.edit_reply_markup(reply_markup=payment_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ" –≤ "–î–µ–π—Å—Ç–≤–∏–µ 1"
@router.callback_query(lambda query: query.data == "go_to_payment")
async def go_to_payment_handler(query: types.CallbackQuery):
    await query.answer()
    card_number = "üí≥ –í–∞—à –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: 2202205347906148\n\n–ö–æ–≤–∞–ª–µ–≤ –î–∞–Ω–∏–∏–ª –ê—Ä—Ç–µ–º–æ–≤–∏—á(—Å–±–µ—Ä)\n\n399.00 —Ä—É–±–ª–µ–π\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª', –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∏–ª" –∏ "–û—Ç–º–µ–Ω–∞"
    paid_button = InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏–ª", callback_data="payment_done")
    cancel_button = InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="back_to_actions")
    payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[[paid_button], [cancel_button]])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.edit_text(card_number, reply_markup=payment_keyboard)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª"
@router.callback_query(lambda query: query.data == "payment_done")
async def payment_done_handler(query: types.CallbackQuery):
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = query.from_user.id
    username = query.from_user.username
    first_name = query.from_user.first_name
    last_name = query.from_user.last_name

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü
    end_date = datetime.now() + timedelta(days=30)
    end_date_str = end_date.strftime("%Y-%m-%d")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ —Ñ–∞–π–ª
    with open("subscriptions.txt", "a") as file:
        file.write(f"{username}:{end_date_str}\n")

    message_to_send = (
        f"–ü–†–ò–í–ê–¢–ö–ê\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ–ø–ª–∞—Ç—É:\n"
        f"ID: {user_id}\n"
        f"–ò–º—è: {first_name} {last_name}\n"
        f"Username: @{username}"
        f"–ü–†–ò–í–ê–¢–ö–ê\n"
    )
    approve_button = InlineKeyboardButton(text="–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"approve_access:{user_id}")
    try:
        await bot.send_message(chat_id=-1002498160000, text=message_to_send, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[approve_button]]))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await query.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –î–æ—Å—Ç—É–ø—ã –∫ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "—Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø"
@router.callback_query(lambda query: query.data.startswith("approve_access:"))
async def approve_access_handler(query: types.CallbackQuery):
    await query.answer()
    user_id = int(query.data.split(":")[1])
    access_link = "https://t.me/+CoJCYExq11M4ZTUy"
    try:
        await bot.send_message(chat_id=user_id, text=f"üéâ –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ–ª—É—á–µ–Ω! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {access_link}")
        await query.message.answer("–ü–†–ò–í–ê–¢–ö–ê –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–†–ò–í–ê–¢–ö–ê")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
@router.callback_query(lambda query: query.data == "back_to_actions")
async def back_to_actions_handler(query: types.CallbackQuery):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_keyboard)
    
async def remove_expired_users():
    group_id = -1002498160000
    updated_subscribers = []
    current_date = datetime.date.today()
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open("subscribers.txt", "r") as file:
        for line in file:
            username, expiration_date_str = line.strip().split(":")
            expiration_date = datetime.datetime.strptime(expiration_date_str, "%Y-%m-%d").date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –¥–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            if expiration_date < current_date:
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
                try:
                    user_id = await bot.get_chat_member(group_id, username)
                    await bot.kick_chat_member(group_id, user_id.user.id)
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {e}")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                updated_subscribers.append(f"{username}:{expiration_date_str}")
    
    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    with open("subscribers.txt", "w") as file:
        for line in updated_subscribers:
            file.write(line + "\n")
            
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–î–µ–π—Å—Ç–≤–∏—è 2"
@router.callback_query(lambda query: query.data == "action2")
async def action2_handler(query: types.CallbackQuery):
    await query.answer()
    new_text = (
        "–¢–∞—Ä–∏—Ñ: –ü—Ä–∏–≤–∞—Ç–∫–∞ (–Ω–∞–≤—Å–µ–≥–¥–∞)\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 600.00 RUB\n"
        "–î–æ—Å—Ç—É–ø –∫:\n"
        "‚Ä¢–ü—Ä–∏–≤–∞—Ç–∫–∞ Premium üëë\n\n"
        "–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø:\n"
        "–ö –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Å–æ —Å–∫—Ä—ã—Ç—ã—Ö –∫–∞–º–µ—Ä üí¶\n"
        "–í–∏–¥–µ–æ —Å –ª–∏—Ü–æ–º –±–µ–∑ –±–ª—é—Ä–∞ üçì\n"
        "–°–∞–º—ã–π —Å–æ—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª,–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∏–≥–¥–µ –Ω–µ—ÇüíØ\n\n"
    
    )
    await query.message.edit_text(new_text, reply_markup=None)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å" –∏ "üëà–Ω–∞–∑–∞–¥"
    pay_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_action2")
    back_button = InlineKeyboardButton(text="üëà–Ω–∞–∑–∞–¥", callback_data="back_to_actions")
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[pay_button], [back_button]]
    )
    await query.message.edit_reply_markup(reply_markup=back_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–æ–ø–ª–∞—Ç–∏—Ç—å" –≤ "–î–µ–π—Å—Ç–≤–∏–µ 2"
@router.callback_query(lambda query: query.data == "pay_action2")
async def pay_action2_handler(query: types.CallbackQuery):
    await query.answer()
    payment_text = "‚úÖ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø—ã –∫ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ. –ü–ª–∞—Ç–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏ —Ç—É —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞"
    await query.message.edit_text(payment_text)

    pay_button = InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="go_to_payment2")
    cancel_button = InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="back_to_actions")
    payment_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[pay_button], [cancel_button]]
    )
    await query.message.edit_reply_markup(reply_markup=payment_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ" –≤ "–î–µ–π—Å—Ç–≤–∏–µ 2"
@router.callback_query(lambda query: query.data == "go_to_payment2")
async def go_to_payment2_handler(query: types.CallbackQuery):
    await query.answer()
    card_number = "üí≥ –í–∞—à –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: 2202205347906148\n\n–ö–æ–≤–∞–ª–µ–≤ –î–∞–Ω–∏–∏–ª –ê—Ä—Ç–µ–º–æ–≤–∏—á(—Å–±–µ—Ä)\n\n600.00 —Ä—É–±–ª–µ–π\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª', –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø."

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∏–ª" –∏ "–û—Ç–º–µ–Ω–∞"
    paid_button = InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏–ª", callback_data="payment_done2")
    cancel_button = InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="back_to_actions")
    payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[[paid_button], [cancel_button]])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.edit_text(card_number, reply_markup=payment_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª" –≤ "–î–µ–π—Å—Ç–≤–∏–µ 2"
@router.callback_query(lambda query: query.data == "payment_done2")
async def payment_done2_handler(query: types.CallbackQuery):
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = query.from_user.id
    username = query.from_user.username
    first_name = query.from_user.first_name
    last_name = query.from_user.last_name

    # –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    end_date_str = "–Ω–∞–≤—Å–µ–≥–¥–∞"

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ —Ñ–∞–π–ª
    with open("subscriptions.txt", "a") as file:
        file.write(f"{username}:{end_date_str}\n")

    message_to_send = (
        f"–ü–†–ò–í–ê–¢–ö–ê\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ–ø–ª–∞—Ç—É:\n"
        f"ID: {user_id}\n"
        f"–ò–º—è: {first_name} {last_name}\n"
        f"Username: @{username}"
        f"\n–ü–†–ò–í–ê–¢–ö–ê\n"
    )
    approve_button = InlineKeyboardButton(text="–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"approve_access:{user_id}")
    try:
        await bot.send_message(chat_id=-1002498160000, text=message_to_send, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[approve_button]]))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await query.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –î–æ—Å—Ç—É–ø—ã –∫ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–î–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã")

MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 –ú–ë –≤ –±–∞–π—Ç–∞—Ö

@router.message(F.photo | F.document)
async def process_media(message: Message ):
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    file = None
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
    if message.photo:
        file = message.photo[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç
    elif message.document:
        file = message.document
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if file:
        file_info = await bot.get_file(file.file_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        file_size = file_info.file_size

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π
        if file_size > MAX_FILE_SIZE:
            await message.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ 10 –ú–ë.")
            return

        # –ï—Å–ª–∏ —Ñ–∞–π–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ
        destination_path = f"{file.file_id}.jpg" if message.photo else file.file_name
        await bot.download(file.file_id, destination=destination_path)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = message.from_user.username or message.from_user.first_name or f"ID: {message.from_user.id}"
        caption = f"–ü–†–ò–í–ê–¢–ö–ê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @{username}" if message.from_user.username else f"–ü–†–ò–í–ê–¢–ö–ê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {first_name} {last_name}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é
        if message.photo:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await bot.send_photo(chat_id='-1002498160000', photo=file.file_id, caption=caption)
        elif message.document:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
            await bot.send_document(chat_id='-1002498160000', document=file.file_id, caption=caption)
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            
if __name__ == '__main__':
    print("–±–æ—Ç —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
    tasks = [
        loop.create_task(dp.start_polling(bot)),
        loop.create_task(auto_accept_requests()),
        loop.create_task(monitor_terminal())
    ]

    loop.run_until_complete(asyncio.wait(tasks))

